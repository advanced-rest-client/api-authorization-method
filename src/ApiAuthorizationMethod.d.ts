
// tslint:disable:variable-name Describing an API that's defined elsewhere.
// tslint:disable:no-any describes the API as best we are able today

import {AuthorizationMethod} from '@advanced-rest-client/authorization-method/src/AuthorizationMethod.js';

import {AmfHelperMixin} from '@api-components/amf-helper-mixin/amf-helper-mixin.js';

import {CustomMethodMixin} from './CustomMethodMixin.js';

import {PassThroughMethodMixin} from './PassThroughMethodMixin.js';

import {ApiOauth1MethodMixin} from './ApiOauth1MethodMixin.js';

import {ApiOauth2MethodMixin} from './ApiOauth2MethodMixin.js';

export const METHOD_CUSTOM: String;
export const METHOD_PASS_THROUGH: String;

export {ApiAuthorizationMethod};

/**
 * An element that renders various authorization methods.
 *
 * ## Development
 *
 * The element mixes in multimple mixins from `src/` directory.
 * Each mixin support an authorization method. When selection change (the `type`
 * property) a render function from correcponding mixin is called.
 */
declare class ApiAuthorizationMethod extends
  AmfHelperMixin(
  ApiOauth2MethodMixin(
  ApiOauth1MethodMixin(
  CustomMethodMixin(
  PassThroughMethodMixin(
  AuthorizationMethod))))) {
  readonly styles: any;
  readonly _transformer: Element;

  /**
   * A security model generated by the AMF parser.
   */
  security: Object;
  /**
   * When set the "description" of the security definition is rendered.
   */
  descriptionOpened: Boolean;

  constructor();
  connectedCallback(): void;
  render(): any;
  updated(changed: Map<String, any>): void;

  /**
   * Creates a settings object with user provided data for current method.
   *
   * @returns User provided data
   */
  serialize(): object|null;

  /**
   * Restores previously serialized settings.
   * A method type must be selected before calling this function.
   *
   * @param settings Depends on current type.
   */
  restore(settings: object|null): any|null;

  /**
   * Validates current method.
   */
  validate(): Boolean|null;
  /**
   * Toggles value of `descriptionOpened` property.
   *
   * This is a utility method for UI event handling. Use `descriptionOpened`
   * attribute directly instead of this method.
   */
  toggleDescription(): void;
  /**
   * Updates, if applicable, query parameter value.
   * This is supported for RAML's custom scheme and Pass Through
   * that operates on query parameters model which is only an internal
   * model.
   *
   * This does nothing if the query parameter has not been defined for current
   * scheme.
   *
   * @param name The name of the changed parameter
   * @param newValue A value to apply. May be empty but must be defined.
   */
  updateQueryParameter(name: string, newValue: string): void;
  /**
   * Updates, if applicable, header value.
   * This is supported for RAML's custom scheme and Pass Through
   * that operates on headers model which is only an internal model.
   *
   * This does nothing if the header has not been defined for current
   * scheme.
   *
   * @param name The name of the changed header
   * @param newValue A value to apply. May be empty but must be defined.
   */
  updateHeader(name: string, newValue: string): void;

  _processSecurity(): void;
  __apiPropHandler(): void;
  __amfChanged(): void;
}
