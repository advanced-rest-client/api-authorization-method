import { AuthorizationMethod } from '@advanced-rest-client/authorization-method/src/AuthorizationMethod.js';
import { AmfHelperMixin } from '@api-components/amf-helper-mixin/amf-helper-mixin.js';
import { normalizeType } from '@advanced-rest-client/authorization-method/src/Utils.js';
import {
  CustomMethodMixin,
  initializeCustomModel,
  renderCustom,
  validateCustom,
  serializeCustom,
  restoreCustom,
} from './CustomMethodMixin.js';
import styles from './Styles.js';

export const METHOD_CUSTOM = 'custom';

export class ApiAuthorizationMethod extends AmfHelperMixin(CustomMethodMixin(AuthorizationMethod)) {
  get styles() {
    return [
      super.authStyles,
      styles,
    ];
  }

  static get properties() {
    return {
      /**
       * A security model generated by the AMF parser.
       * @type {Object|Array}
       */
      security: { type: Object },
      /**
       * When set the "description" of the security definition is rendered.
       * @type {Boolean}
       */
      descriptionOpened: { type: Boolean }
    };
  }

  updated(changed) {
    if (changed.has('security') || changed.has('type')) {
      // the `updated()` is called asynchronously anyway so no need to
      // call `__apiPropHandler()`
      this._processSecurity();
    }
  }

  /**
   * Overrides `AmfHelperMixin.__amfChanged`
   */
  async __amfChanged() {
    this.__apiPropHandler();
  }

  async __apiPropHandler() {
    if (this.__schemeDebouncer) {
      return;
    }
    // This ensures that the `type` and `security` properties are reflected
    // from the attribute, if set.
    await this.updateComplete;
    this.__schemeDebouncer = true;
    setTimeout(() => {
      this.__schemeDebouncer = false;
      this._processSecurity();
    });
  }

  _processSecurity() {
    const type = normalizeType(this.type);
    switch (type) {
      case METHOD_CUSTOM: this[initializeCustomModel](); break;
    }
  }
  /**
   * Toggles value of `descriptionOpened` property.
   *
   * This is a utility method for UI event handling. Use `descriptionOpened`
   * attribute directly instead of this method.
   */
  toggleDescription() {
    this.descriptionOpened = !this.descriptionOpened;
  }

  /**
   * Validates current method.
   * @return {Boolean}
   */
  validate() {
    const type = normalizeType(this.type);
    switch(type) {
      case METHOD_CUSTOM: return this[validateCustom]();
      default: return super.validate();
    }
  }

  /**
   * Creates a settings object with user provided data for current method.
   *
   * @return {Object} User provided data
   */
  serialize() {
    const type = normalizeType(this.type);
    switch(type) {
      case METHOD_CUSTOM: return this[serializeCustom]();
      default: return super.serialize();
    }
  }

  /**
   * Restores previously serialized settings.
   * A method type must be selected before calling this function.
   *
   * @param {Object} settings Depends on current type.
   * @return {any}
   */
  restore(settings) {
    const type = normalizeType(this.type);
    switch(type) {
      case METHOD_CUSTOM: return this[restoreCustom](settings);
      default: return super.restore(settings);
    }
  }

  render() {
    const type = normalizeType(this.type);
    switch(type) {
      case METHOD_CUSTOM: return this[renderCustom]();
      default: return super.render();
    }
  }
}
